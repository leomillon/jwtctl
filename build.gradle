buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
  }
}

plugins {
  //id 'org.jmailen.kotlinter' version '1.7.0'
  id 'com.github.ben-manes.versions' version '0.17.0'
}

apply plugin: 'application'
apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'org.junit.platform.gradle.plugin'

junitPlatform {
  filters {
    engines {
      include 'spek'
    }
  }
}

sourceCompatibility = 1.6

repositories {
  jcenter()
}

dependencies {

  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
  compile "io.github.microutils:kotlin-logging:$kotlin_logging_version"
  compile "ch.qos.logback:logback-classic:$logback_version"

  compile "com.xenomachina:kotlin-argparser:$kotlin_argparser_version"
  compile "io.jsonwebtoken:jjwt:$jjwt_version"
  compile "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
  compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
  compile "com.natpryce:konfig:$konfig_version"

  testCompile "io.kotlintest:kotlintest:$kotlintest_version"
  testCompile "org.jetbrains.spek:spek-api:$spek_version"
  testRuntime "org.jetbrains.spek:spek-junit-platform-engine:$spek_version"
  testCompile "com.github.stefanbirkner:system-rules:1.17.1"
}

//////////////////////////////////////////////////////////////////////////////
// application config
//////////////////////////////////////////////////////////////////////////////

mainClassName = "com.github.leomillon.jwt.generator.MainKt"

// This will cause the wrapper script generated by gradle to pass the program
// name in via the com.xenomachina.argparser.programName property.
//
// TODO: it would be even better if we could convince gradle to pass in $0 (and
// whatever the equivalent is on Windows) so that the name would adapt to
// whatever the user is calling it by (which can vary depending on how it was
// installed, or if the user is calling it with a qualified pathname or via a
// symlink). See also https://stackoverflow.com/q/48307027/90848
applicationDefaultJvmArgs = ["-Dcom.xenomachina.argparser.programName=$name"]


jar {
  manifest {
    attributes 'Implementation-Title': name,
            'Implementation-Version': version
  }
}

// Replace ${project-version} token in Yaml files
processResources {
  from(sourceSets.main.resources.srcDirs) {
    include '**/*.yml'
    include '**/*.properties'
    filter { String line -> line.replace "\${project-version}", project.version }
  }
}
